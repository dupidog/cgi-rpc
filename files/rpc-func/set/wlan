# WLAN set script

json_get_var WLAN_DEVICE "device"
json_get_var WLAN_ENABLED "enabled"
json_get_var WLAN_CHANNEL "channel"
json_get_var WLAN_ENCRYPTION "encryption"
json_get_var WLAN_SSID "ssid"
json_get_var WLAN_BSSID "bssid"
json_get_var WLAN_KEY "key"

WLAN_CHANNEL=$(echo $WLAN_CHANNEL | grep ^[0-9]*$)
if [ "x$(echo $WLAN_KEY | grep '^JSON_ARRAY')" != "x" ]; then json_get_values WLAN_KEY "key"; fi

RET_INFO=""

# default wlan device
if [ "x$WLAN_DEVICE" = "x" ]; then WLAN_DEVICE="radio0"; fi
RET_INFO="$RET_INFO,\"device\":\"$WLAN_DEVICE\""

# check wlan device
if [ "x`uci get wireless.$WLAN_DEVICE`" = "x" ]; then
    echo "{\"ret\":\"NOT_CHANGED\",\"reason\":\"invalid wlan device\"}"
    exit 1;
fi

# search/match wifi-iface
tempnum=0
ifnum=-1
while [ $tempnum -le 4 ]
do
    if [ "`uci get wireless.@wifi-iface[$tempnum]`" = "wifi-iface" -a \
        "`uci get wireless.@wifi-iface[$tempnum].device`" = "$WLAN_DEVICE" ]; then
        ifnum=$tempnum
    fi
    tempnum=$(($tempnum+1))
done

if [ $ifnum = -1 ]; then
    echo "{\"ret\":\"NOT_CHANGED\",\"reason\":\"iface not found\"}"
    exit 2;
fi

# enable/disable wlan device
if [ "$WLAN_ENABLED" = "0" ]; then
    uci set wireless.$WLAN_DEVICE.disabled=
    uci set wireless.@wifi-iface[$ifnum].disabled="1"
    RET_INFO="$RET_INFO,\"enabled\":\"0\""
elif [ "x$WLAN_ENABLED" != "x" ]; then
    uci set wireless.@WLAN_DEVICE.disabled=
    uci set wireless.@wifi-iface[$ifnum].disabled="0"
    RET_INFO="$RET_INFO,\"enabled\":\"1\""
fi 

# set channel
if [ "x$WLAN_CHANNEL" != "x" ]; then
    uci set wireless.$WLAN_DEVICE.channel="$WLAN_CHANNEL"
    RET_INFO="$RET_INFO,\"channel\":\"$WLAN_CHANNEL\""
fi

# set encryption
if [ "x$WLAN_ENCRYPTION" != "x" ]; then
    RET_INFO="$RET_INFO,\"encryption\":\"$WLAN_ENCRYPTION\""
    if [ "$WLAN_ENCRYPTION" = "none" ]; then
        uci set wireless.@wifi-iface[$ifnum].encryption="none"
    elif [ "$WLAN_ENCRYPTION" = "psk" ]; then
        uci set wireless.@wifi-iface[$ifnum].encryption="psk"
    elif [ "$WLAN_ENCRYPTION" = "psk2" ]; then
        uci set wireless.@wifi-iface[$ifnum].encryption="psk2"
    elif [ "$WLAN_ENCRYPTION" = "psk-mixed" ]; then
        uci set wireless.@wifi-iface[$ifnum].encryption="psk-mixed"
    elif [ "$WLAN_ENCRYPTION" = "wep-open" ]; then
        uci set wireless.@wifi-iface[$ifnum].encryption="wep-open"
    elif [ "$WLAN_ENCRYPTION" = "wep-shared" ]; then
        uci set wireless.@wifi-iface[$ifnum].encryption="wep-shard"
    else
        echo "{\"ret\":\"NOT_CHANGED\",\"reason\":\"invalid wlan encryption\"}"
        exit 3;
    fi
fi

# set ssid/bssid
if [ "x$WLAN_SSID" != "x" ]; then
    uci set wireless.@wifi-iface[$ifnum].ssid="$WLAN_SSID"
    RET_INFO="$RET_INFO,\"ssid\":\"$WLAN_SSID\""
fi
# if no bssid specified, delete the bssid option
uci set wireless.@wifi-iface[$ifnum].bssid="$WLAN_BSSID"
[ "x$WLAN_BSSID" != "x" ]RET_INFO="$RET_INFO,\"bssid\":\"$WLAN_BSSID\""

# sed key(s)
if [ "x$WLAN_KEY" != "x" ]; then
    uci delete wireless.@wifi-iface[$ifnum].key1
    uci delete wireless.@wifi-iface[$ifnum].key2
    uci delete wireless.@wifi-iface[$ifnum].key3
    uci delete wireless.@wifi-iface[$ifnum].key4
    if [ "$WLAN_ENCRYPTION" = "wep-open" -o "$WLAN_ENCRYPTION" = "wep-shared" ]; then
        if [ "$(echo $WLAN_KEY | awk '{print NF}')" = '1' ]; then
            uci set wireless.@wifi-iface[$ifnum].key="1"
            uci set wireless.@wifi-iface[$ifnum].key1="s:$WLAN_KEY"
        else
            KEY_NUM="$(echo $WLAN_KEY | awk '$1~/^[1-4]$/ {print $1}')"
            uci set wireless.@wifi-iface[$ifnum].key="${KEY_NUM:-1}"
            uci set wireless.@wifi-iface[$ifnum].key1="$(echo $WLAN_KEY | awk '$2!~/^$/ {print "s:"$2}')"
            uci set wireless.@wifi-iface[$ifnum].key2="$(echo $WLAN_KEY | awk '$3!~/^$/ {print "s:"$3}')"
            uci set wireless.@wifi-iface[$ifnum].key3="$(echo $WLAN_KEY | awk '$4!~/^$/ {print "s:"$4}')"
            uci set wireless.@wifi-iface[$ifnum].key4="$(echo $WLAN_KEY | awk '$5!~/^$/ {print "s:"$5}')"
        fi
    else
        uci set wireless.@wifi-iface[$ifnum].key="$WLAN_KEY"
    fi
    RET_INFO="$RET_INFO,\"key\":\"$WLAN_KEY\""
fi

uci commit wireless

if [ "x$RET_INFO" != "x" ]; then
    echo "{\"ret\":\"OK\"$RET_INFO}"
else
    echo "{\"ret\":\"NOT_CHANGED\",\"reason\":\"no valid args\"}"
fi

[ "$1" = "0" -o "x$1" = "x" ] && wifi > /dev/null
